// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Error Describes an error response
type Error struct {
	Message    *string `json:"Message,omitempty"`
	StatusCode *int64  `json:"StatusCode,omitempty"`
}

// Hardware Describes a hardware component
type Hardware struct {
	ID      *string   `json:"ID,omitempty"`
	Name    *string   `json:"Name,omitempty"`
	Sensors *[]Sensor `json:"Sensors,omitempty"`
	Type    *string   `json:"Type,omitempty"`
}

// Sensor Describes a sensor
type Sensor struct {
	ID   *string `json:"ID,omitempty"`
	Name *string `json:"Name,omitempty"`
	Type *string `json:"Type,omitempty"`

	// Value Describes a sensor value
	Value *SensorValue `json:"Value,omitempty"`
}

// SensorValue Describes a sensor value
type SensorValue struct {
	Timestamp *int64 `json:"Timestamp,omitempty"`
	Value     *int64 `json:"Value,omitempty"`
}

// Stats Describes a response to the GetStats endpoint
type Stats struct {
	Hardware *[]Hardware `json:"Hardware,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns the health status of the API.
	// (GET /health)
	HealthCheck(ctx echo.Context) error
	// Returns a map of hardware stats.
	// (GET /stats)
	GetStats(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.HealthCheck)
	router.GET(baseURL+"/stats", wrapper.GetStats)

}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200TextResponse string

func (response HealthCheck200TextResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type GetStatsRequestObject struct {
}

type GetStatsResponseObject interface {
	VisitGetStatsResponse(w http.ResponseWriter) error
}

type GetStats200JSONResponse Stats

func (response GetStats200JSONResponse) VisitGetStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStats500JSONResponse Error

func (response GetStats500JSONResponse) VisitGetStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns the health status of the API.
	// (GET /health)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// Returns a map of hardware stats.
	// (GET /stats)
	GetStats(ctx context.Context, request GetStatsRequestObject) (GetStatsResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(ctx echo.Context) error {
	var request HealthCheckRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx.Request().Context(), request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		return validResponse.VisitHealthCheckResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetStats operation middleware
func (sh *strictHandler) GetStats(ctx echo.Context) error {
	var request GetStatsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStats(ctx.Request().Context(), request.(GetStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetStatsResponseObject); ok {
		return validResponse.VisitGetStatsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVTW/TQBD9K6uBoxWnfB18Qy2iEQIqWsEBcdjak3hbe3c1My5Ulf872nGclsRNI+CU",
	"Xc/Xe2/fbu6gDG0MHr0wFHfAZY2t1eU7okBpUSGX5KK44KGAE91dIhvrDaYcQ8gxeEbIIFKISOJQW3xE",
	"ZrvCtJTbiFAACzm/gj6Dc7HS8XGoNLwM1FqBApyXN68gG/OdF1whQd9vPoXLKywltTi1VP20hHtBmnqd",
	"ZTZMd3AuTiYhfrLtI9jRcyAtdYKtLp4TLqGAZ/m9oPlazXzIh3sOlsjepv2F7ndGTLFdN9nLlYecf+X3",
	"CKoMvtqmw8PYDql7mGx6PUXH3GjmNqkL1yKLbeNB/nmA/a+8luzK+9GO18BIMFKjeY+iVQZ9FYOb8N1D",
	"Ax9kpE3BjpV2MadPzi/DLuiL2rFxrCDfni1MFcquRS82xc0ykEa+OW8G/GeuvEZKqbOklpMmzZmKQwY3",
	"SDyMOZrNZ/OENET0Njoo4OXsaDZPMliplWxeo22kTssVSvpJ+iiQRQUFnGr4uMbyGjIYFdbSF/N5+imD",
	"l3Snk13xl+Sxsc7fP2VTl6vPtgT5/EEF5K5tLd1CAV9QOvKDQgNCw/pembAcZZtpTc6jMdb4J6Qez9/Q",
	"uq01jWNJvTaPk7ZJ8v7Jf/TQ0+RtjI0rtTK/4rAlwd77qgMekSWD1/9x1PCfMjFq4QXJ28acI90gmTFx",
	"6lCsaW2cEk/7sjZgKL5vn0Wy+hCFDDpqoIAc+h/97wAAAP//k8qqYwQHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
