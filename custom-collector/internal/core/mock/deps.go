// Code generated by MockGen. DO NOT EDIT.
// Source: core.go
//
// Generated by this command:
//
//	mockgen -destination=mock/deps.go -package=mock -source=core.go TimeGenerator,StatsRepo,Store
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	core "github.com/genvmoroz/custom-collector/internal/core"
	gomock "go.uber.org/mock/gomock"
)

// MockTimeGenerator is a mock of TimeGenerator interface.
type MockTimeGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTimeGeneratorMockRecorder
}

// MockTimeGeneratorMockRecorder is the mock recorder for MockTimeGenerator.
type MockTimeGeneratorMockRecorder struct {
	mock *MockTimeGenerator
}

// NewMockTimeGenerator creates a new mock instance.
func NewMockTimeGenerator(ctrl *gomock.Controller) *MockTimeGenerator {
	mock := &MockTimeGenerator{ctrl: ctrl}
	mock.recorder = &MockTimeGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeGenerator) EXPECT() *MockTimeGeneratorMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimeGenerator) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeGeneratorMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeGenerator)(nil).Now))
}

// MockStatsRepo is a mock of StatsRepo interface.
type MockStatsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepoMockRecorder
}

// MockStatsRepoMockRecorder is the mock recorder for MockStatsRepo.
type MockStatsRepoMockRecorder struct {
	mock *MockStatsRepo
}

// NewMockStatsRepo creates a new mock instance.
func NewMockStatsRepo(ctrl *gomock.Controller) *MockStatsRepo {
	mock := &MockStatsRepo{ctrl: ctrl}
	mock.recorder = &MockStatsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepo) EXPECT() *MockStatsRepoMockRecorder {
	return m.recorder
}

// GetCurrentSensorValues mocks base method.
func (m *MockStatsRepo) GetCurrentSensorValues(ctx context.Context) (map[core.Sensor]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSensorValues", ctx)
	ret0, _ := ret[0].(map[core.Sensor]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSensorValues indicates an expected call of GetCurrentSensorValues.
func (mr *MockStatsRepoMockRecorder) GetCurrentSensorValues(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSensorValues", reflect.TypeOf((*MockStatsRepo)(nil).GetCurrentSensorValues), ctx)
}

// GetSensorsByHardware mocks base method.
func (m *MockStatsRepo) GetSensorsByHardware(ctx context.Context) (map[core.Hardware][]core.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorsByHardware", ctx)
	ret0, _ := ret[0].(map[core.Hardware][]core.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorsByHardware indicates an expected call of GetSensorsByHardware.
func (mr *MockStatsRepoMockRecorder) GetSensorsByHardware(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorsByHardware", reflect.TypeOf((*MockStatsRepo)(nil).GetSensorsByHardware), ctx)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetValuesForRange mocks base method.
func (m *MockStore) GetValuesForRange(sID core.SensorID, from, to time.Time) ([]core.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesForRange", sID, from, to)
	ret0, _ := ret[0].([]core.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValuesForRange indicates an expected call of GetValuesForRange.
func (mr *MockStoreMockRecorder) GetValuesForRange(sID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesForRange", reflect.TypeOf((*MockStore)(nil).GetValuesForRange), sID, from, to)
}

// StoreValue mocks base method.
func (m *MockStore) StoreValue(sID core.SensorID, value core.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreValue", sID, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreValue indicates an expected call of StoreValue.
func (mr *MockStoreMockRecorder) StoreValue(sID, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreValue", reflect.TypeOf((*MockStore)(nil).StoreValue), sID, value)
}
